.container {
    background: #343434;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
  
  .board {
    margin: 1rem 0;
    border-radius: 0.5rem;
    padding: 1.5rem;
    background: #121212;
  }
  
  // Counter
  
  $bitSize: 0.5em;
  $bitColorOff: #393939;
  $bitColorOn: mintcream;
  
  .separator{
    color: $bitColorOn;
    font-size: 50px;
    vertical-align: middle; 
  }

  .counter {
    display: inline-block;
    vertical-align: middle;
    position: relative;
    width: $bitSize * 4;
    height: $bitSize * 7;
    font-size: 24px;
    color: $bitColorOff;
  }
  .counter--digital {
    .counter__bit {
      box-shadow: 0 0 0 transparent;
      &:nth-child(1),
      &:nth-child(4),
      &:nth-child(9),
      &:nth-child(12),
      &:nth-child(17),
      &:nth-child(20) {
        background: transparent;
        box-sizing: border-box;
      }
      &:nth-child(2),
      &:nth-child(3),
      &:nth-child(5),
      &:nth-child(6),
      &:nth-child(7),
      &:nth-child(8),
      &:nth-child(10),
      &:nth-child(11),
      &:nth-child(13),
      &:nth-child(14),
      &:nth-child(15),
      &:nth-child(16),
      &:nth-child(18),
      &:nth-child(19) {
        &:before {
          content: "";
          position: absolute;
          border-width: $bitSize / 2;
          border-style: solid;
          border-color: transparent;
        }
      }
      &:nth-child(2),
      &:nth-child(10),
      &:nth-child(18) {
        transform: translateX(1px);
        &:before {
          top: 0;
          bottom: 0;
          right: 100%;
          border-right-color: currentColor;
        }
      }
      &:nth-child(3),
      &:nth-child(11),
      &:nth-child(19) {
        transform: translateX(-1px);
        &:before {
          top: 0;
          bottom: 0;
          left: 100%;
          border-left-color: currentColor;
        }
      }
      &:nth-child(5),
      &:nth-child(6),
      &:nth-child(13),
      &:nth-child(14) {
        transform: translateY(1px);
        &:before {
          left: 0;
          right: 0;
          bottom: 100%;
          border-bottom-color: currentColor;
        }
      }
      &:nth-child(7),
      &:nth-child(8), 
      &:nth-child(15),
      &:nth-child(16) {
        transform: translateY(-1px);
        &:before {
          left: 0;
          right: 0;
          top: 100%;
          border-top-color: currentColor;
        }
      }
    }
  }
  .counter--ball {
    .counter__bit {
      border-radius: $bitSize;
    }
  }
  .counter__bit {
    position: absolute;
    display: block;
    width: $bitSize;
    height: $bitSize;
    line-height: 1;
    background-color: currentColor;
    box-shadow: inset 0 0 1px 1px #000;
  }
  .counter__bit:nth-child(1) {
    top: 0;
    left: 0;
  }
  .counter__bit:nth-child(2) {
    top: 0;
    left: $bitSize * 1;
  }
  .counter__bit:nth-child(3) {
    top: 0;
    left: $bitSize * 2;
  }
  .counter__bit:nth-child(4) {
    top: 0;
    left: $bitSize * 3;
  }
  .counter__bit:nth-child(5) {
    top: $bitSize;
    left: 0;
  }
  .counter__bit:nth-child(6) {
    top: $bitSize;
    left: $bitSize * 3;
  }
  .counter__bit:nth-child(7) {
    top: $bitSize * 2;
    left: 0;
  }
  .counter__bit:nth-child(8) {
    top: $bitSize * 2;
    left: $bitSize * 3;
  }
  .counter__bit:nth-child(9) {
    top: $bitSize * 3;
    left: 0;
  }
  .counter__bit:nth-child(10) {
    top: $bitSize * 3;
    left: $bitSize;
  }
  .counter__bit:nth-child(11) {
    top: $bitSize * 3;
    left: $bitSize * 2;
  }
  .counter__bit:nth-child(12) {
    top: $bitSize * 3;
    left: $bitSize * 3;
  }
  .counter__bit:nth-child(13) {
    top: $bitSize * 4;
    left: 0;
  }
  .counter__bit:nth-child(14) {
    top: $bitSize * 4;
    left: $bitSize * 3;
  }
  .counter__bit:nth-child(15) {
    top: $bitSize * 5;
    left: 0;
  }
  .counter__bit:nth-child(16) {
    top: $bitSize * 5;
    left: $bitSize * 3;
  }
  .counter__bit:nth-child(17) {
    top: $bitSize * 6;
    left: 0;
  }
  .counter__bit:nth-child(18) {
    top: $bitSize * 6;
    left: $bitSize;
  }
  .counter__bit:nth-child(19) {
    top: $bitSize * 6;
    left: $bitSize * 2;
  }
  .counter__bit:nth-child(20) {
    top: $bitSize * 6;
    left: $bitSize * 3;
  }
  
  // Count mixin
  @mixin digital-counter($count...) {
    @each $i in $count {
      .counter__bit:nth-child(#{$i}) {
        color: $bitColorOn;
      }
    }
  }
  
  // #0
  .counter--0 {
    @include digital-counter(1,2,3,4,5,6,7,8,9,12,13,14,15,16,17,18,19,20);
  }
  
  // #1
  .counter--1 {
    @include digital-counter(4,6,8,12,14,16,20);
  }
  
  // #2
  .counter--2 {
    @include digital-counter(1,2,3,4,6,8,9,10,11,12,13,15,17,18,19,20);
  }
  
  // #3
  .counter--3 {
    @include digital-counter(1,2,3,4,6,8,9,10,11,12,14,16,17,18,19,20);
  }
  
  // #4
  .counter--4 {
    @include digital-counter(1,4,5,6,7,8,9,10,11,12,14,16,20);
  }
  
  // #5
  .counter--5 {
    @include digital-counter(1,2,3,4,5,7,9,10,11,12,14,16,17,18,19,20);
  }
  
  // #6
  .counter--6 {
    @include digital-counter(1,2,3,4,5,7,9,10,11,12,13,14,15,16,17,18,19,20);
  }
  
  // #7
  .counter--7 {
    @include digital-counter(1,2,3,4,6,8,12,14,16,20);
  }
  
  // #8
  .counter--8 {
    @include digital-counter(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20);
  }
  
  // #9
  .counter--9 {
    @include digital-counter(1,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,19,20);
  }